// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  password    String
  profileImage   String? 
  createdAt   DateTime @default(now())
  ratings     Rating[]
  suggestions Suggestion[] // Adicione esta linha
}

// --- NOVO MODELO DE SUGESTÃO ---
model Suggestion {
  id          String   @id @default(cuid())
  name        String
  description String
  latitude    Float
  longitude   Float
  status      String   @default("PENDING") // Status: PENDING, APPROVED, REJECTED
  createdAt   DateTime @default(now())
  
  // Relacionamento com o usuário que sugeriu
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Admin {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
}

model Place {
  id            String    @id @default(cuid())
  name          String
  description   String
  address       Json
  latitude      Float?
  longitude     Float?
  iconURL       String
  averageRating Float     @default(0) // Novo campo para a média
  photos        String[]
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  ratings       Rating[]  // Adiciona a relação com as avaliações do local
  createdAt     DateTime  @default(now())
  socialLinks   Json?    // Links sociais do local, como Instagram, Facebook, etc.
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  places Place[]
}

// --- NOVO MODELO DE RATING ---
model Rating {
  id        String   @id @default(cuid())
  value     Int      // A nota, de 1 a 5
  comment   String?  // Um comentário opcional
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  place     Place    @relation(fields: [placeId], references: [id])
  placeId   String

  @@unique([userId, placeId]) // Garante que um usuário só pode avaliar um local uma vez
}

model Mare {
  id       String   @id @default(cuid())
  mes      String   // "01", "02", ..., "12"
  dia      String   // "01", "02", ..., "31"
  horarios Json     // lista de objetos { horas: string, altura: string }
}